{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FaBo Jetson Docs FaBo Jetson Docs\u306b\u3064\u3044\u3066 Jetson\u306b\u95a2\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002 \u4fee\u6b63\u4f9d\u983c\u7b49 Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u3066\u304f\u3060\u3055\u3044\u3002 \u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 Jetson Docs Android Things Docs DonkeyCar Docs Denbun Docs Circuit Docs Swift Docs Keras Docs NRF Docs DeviceWebAPI Docs","title":"FaBo Jetson Docs"},{"location":"#fabo-jetson-docs","text":"","title":"FaBo Jetson Docs"},{"location":"#fabo-jetson-docs_1","text":"Jetson\u306b\u95a2\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002","title":"FaBo Jetson Docs\u306b\u3064\u3044\u3066"},{"location":"#_1","text":"Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u4fee\u6b63\u4f9d\u983c\u7b49"},{"location":"#_2","text":"Jetson Docs Android Things Docs DonkeyCar Docs Denbun Docs Circuit Docs Swift Docs Keras Docs NRF Docs DeviceWebAPI Docs","title":"\u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8"},{"location":"i2c/","text":"I2C\u306e\u8a8d\u8b58 1 $ i2cdetect -y -r 8","title":"I2C\u306e\u8a8d\u8b58"},{"location":"i2c/#i2c","text":"1 $ i2cdetect -y -r 8","title":"I2C\u306e\u8a8d\u8b58"},{"location":"spi/","text":"SPI 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 # SPI # pip install spidev import spidev import time import sys spi = spidev . SpiDev () # open: Connects the object to the specified SPI device. open(X,Y) will open /de v / spidev - X . Y bus = 0 device = 0 spi . open ( bus , device ) # SPI Settings # max_speed_hz: Property that gets / sets the maximum bus speed in Hz. # mode: Property that gets /sets the SPI mode as two bit pattern of Clock Polari ty and Phase [ CPOL | CPHA ] . Range : 0b00 .. 0b11 ( 0. . 3 ) spi . max_speed_hz = 5000 spi . mode = 0b01 # SPI\u30b3\u30cd\u30af\u30bf\u306b\u6a5f\u5668\u3092\u63a5\u7d9a SPI_PIN_CHANNEL = 0 #read SPI from the ADC(MCP3008 chip), 8 possible chanels def readadc ( channel ): \"\"\" Analog Data Converter\u306e\u5024\u3092\u8aad\u307f\u8fbc\u3080 @channel \u30c1\u30e3\u30f3\u30cd\u30eb\u756a\u53f7 \"\"\" #Writes a list of values to SPI device. #bits_per_word: Property that gets / sets the bits per word. #xfer2(list of values[, speed_hz, delay_usec, bits_per_word]) speed_hz = 1 delay_usec = ( 8 + channel ) << 4 bits_per_word = 0 to_send = [ speed_hz , delay_usec , bits_per_word ] adc = spi . xfer2 ( to_send ) data = (( adc [ 1 ] & 3 ) << 8 ) + adc [ 2 ] return data def map ( x , in_min , in_max , out_min , out_max ): \"\"\" map\u95a2\u6570 @x \u5909\u63db\u3057\u305f\u3044\u5024 @in_min \u5909\u63db\u524d\u306e\u6700\u5c0f\u5024 @in_max \u5909\u63db\u524d\u306e\u6700\u5927\u5024 @out_min \u5909\u63db\u5f8c\u306e\u6700\u5c0f @out_max \u5909\u63db\u5f8c\u306e\u6700\u5927\u5024 @return \u5909\u63db\u3055\u308c\u305f\u5024 \"\"\" return ( x - in_min ) * ( out_max - out_min ) // ( in_max - in_min ) + out_min try : while True : data = readadc ( SPI_PIN_CHANNEL ) value = map ( data , 0 , 1023 , 0 , 100 ) print ( \"adc : {:8} \" . format ( data )) time . sleep ( 0.1 ) except KeyboardInterrupt : # close: Disconnects the object from the interface spi . close () sys . exit ( 0 )","title":"Spi"},{"location":"uart/","text":"UART Jetson Xavier UART\u306e\u30d5\u30a9\u30eb\u30c0 1 2 3 /dev/ttyTHS0 /dev/ttyTHS1 /dev/ttyTHS4 J21\u7aef\u5b508\u30d4\u30f3(TX),10\u30d4\u30f3(RX)\u304c/dev/TTS0\u3002 J17 UART\u7aef\u5b50\u304c/dev/TTYHS2\u3002","title":"Uart"},{"location":"uart/#jetson-xavier","text":"UART\u306e\u30d5\u30a9\u30eb\u30c0 1 2 3 /dev/ttyTHS0 /dev/ttyTHS1 /dev/ttyTHS4 J21\u7aef\u5b508\u30d4\u30f3(TX),10\u30d4\u30f3(RX)\u304c/dev/TTS0\u3002 J17 UART\u7aef\u5b50\u304c/dev/TTYHS2\u3002","title":"Jetson Xavier"}]}